From 3fa21c89c0bbe112012d31e5441e18bedd7b2fd9 Mon Sep 17 00:00:00 2001
From: Dor Hen <dorhen@meta.com>
Date: Wed, 30 Oct 2024 11:45:22 +0200
Subject: [PATCH 22/28] Comment unused variables in implemented functions 13\n

Increased the number of errors the automation is fixing to 150 from
75 in this commit.

Bug: webrtc:370878648
Change-Id: If6e6a5f40db7eb54c27c1a85fb7031838e478c70
Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/366205
Reviewed-by: Harald Alvestrand <hta@webrtc.org>
Reviewed-by: Danil Chapovalov <danilchap@webrtc.org>
Commit-Queue: Dor Hen <dorhen@meta.com>
Cr-Commit-Position: refs/heads/main@{#43337}
---
 .../desktop_and_cursor_composer_unittest.cc          | 10 +++++++---
 modules/desktop_capture/desktop_capturer.cc          | 12 ++++++------
 modules/desktop_capture/desktop_capturer.h           |  2 +-
 modules/desktop_capture/mac/screen_capturer_mac.mm   |  2 +-
 modules/desktop_capture/mac/screen_capturer_sck.mm   |  4 ++--
 modules/desktop_capture/mouse_cursor_monitor.h       |  6 +++---
 modules/desktop_capture/window_capturer_unittest.cc  |  2 +-
 7 files changed, 21 insertions(+), 17 deletions(-)

diff --git a/modules/desktop_capture/desktop_and_cursor_composer_unittest.cc b/modules/desktop_capture/desktop_and_cursor_composer_unittest.cc
index 179e002bc5..45673722fe 100644
--- a/modules/desktop_capture/desktop_and_cursor_composer_unittest.cc
+++ b/modules/desktop_capture/desktop_and_cursor_composer_unittest.cc
@@ -121,7 +121,9 @@ class FakeScreenCapturer : public DesktopCapturer {
     next_frame_ = std::move(next_frame);
   }
 
-  bool IsOccluded(const DesktopVector& pos) override { return is_occluded_; }
+  bool IsOccluded(const DesktopVector& /* pos */) override {
+    return is_occluded_;
+  }
 
   void set_is_occluded(bool value) { is_occluded_ = value; }
 
@@ -147,7 +149,9 @@ class FakeMouseMonitor : public MouseCursorMonitor {
     hotspot_ = hotspot;
   }
 
-  void Init(Callback* callback, Mode mode) override { callback_ = callback; }
+  void Init(Callback* callback, Mode /* mode */) override {
+    callback_ = callback;
+  }
 
   void Capture() override {
     if (changed_) {
@@ -209,7 +213,7 @@ class DesktopAndCursorComposerTest : public ::testing::Test,
   }
 
   // DesktopCapturer::Callback interface
-  void OnCaptureResult(DesktopCapturer::Result result,
+  void OnCaptureResult(DesktopCapturer::Result /* result */,
                        std::unique_ptr<DesktopFrame> frame) override {
     frame_ = std::move(frame);
   }
diff --git a/modules/desktop_capture/desktop_capturer.cc b/modules/desktop_capture/desktop_capturer.cc
index a52a76c262..7fd0fc31d8 100644
--- a/modules/desktop_capture/desktop_capturer.cc
+++ b/modules/desktop_capture/desktop_capturer.cc
@@ -45,15 +45,15 @@ DesktopCapturer::GetDelegatedSourceListController() {
 }
 
 void DesktopCapturer::SetSharedMemoryFactory(
-    std::unique_ptr<SharedMemoryFactory> shared_memory_factory) {}
+    std::unique_ptr<SharedMemoryFactory> /* shared_memory_factory */) {}
 
-void DesktopCapturer::SetExcludedWindow(WindowId window) {}
+void DesktopCapturer::SetExcludedWindow(WindowId /* window */) {}
 
-bool DesktopCapturer::GetSourceList(SourceList* sources) {
+bool DesktopCapturer::GetSourceList(SourceList* /* sources */) {
   return true;
 }
 
-bool DesktopCapturer::SelectSource(SourceId id) {
+bool DesktopCapturer::SelectSource(SourceId /* id */) {
   return false;
 }
 
@@ -61,7 +61,7 @@ bool DesktopCapturer::FocusOnSelectedSource() {
   return false;
 }
 
-bool DesktopCapturer::IsOccluded(const DesktopVector& pos) {
+bool DesktopCapturer::IsOccluded(const DesktopVector& /* pos */) {
   return false;
 }
 
@@ -109,7 +109,7 @@ std::unique_ptr<DesktopCapturer> DesktopCapturer::CreateScreenCapturer(
 
 // static
 std::unique_ptr<DesktopCapturer> DesktopCapturer::CreateGenericCapturer(
-    const DesktopCaptureOptions& options) {
+    [[maybe_unused]] const DesktopCaptureOptions& options) {
   std::unique_ptr<DesktopCapturer> capturer;
 
 #if defined(WEBRTC_USE_PIPEWIRE)
diff --git a/modules/desktop_capture/desktop_capturer.h b/modules/desktop_capture/desktop_capturer.h
index 9c7ecc78f4..bb0742a410 100644
--- a/modules/desktop_capture/desktop_capturer.h
+++ b/modules/desktop_capture/desktop_capturer.h
@@ -109,7 +109,7 @@ class RTC_EXPORT DesktopCapturer {
   // supported by all capturers. This will only affect the frequency at which
   // new frames are available, not the frequency at which you are allowed to
   // capture the frames.
-  virtual void SetMaxFrameRate(uint32_t max_frame_rate) {}
+  virtual void SetMaxFrameRate(uint32_t /* max_frame_rate */) {}
 
   // Returns a valid pointer if the capturer requires the user to make a
   // selection from a source list provided by the capturer.
diff --git a/modules/desktop_capture/mac/screen_capturer_mac.mm b/modules/desktop_capture/mac/screen_capturer_mac.mm
index e6746578ad..d4e9c111db 100644
--- a/modules/desktop_capture/mac/screen_capturer_mac.mm
+++ b/modules/desktop_capture/mac/screen_capturer_mac.mm
@@ -455,7 +455,7 @@ bool ScreenCapturerMac::RegisterRefreshAndMoveHandlers() {
     DesktopVector display_origin = config.pixel_bounds.top_left();
 
     CGDisplayStreamFrameAvailableHandler handler = ^(CGDisplayStreamFrameStatus status,
-                                                     uint64_t display_time,
+                                                     uint64_t /* display_time */,
                                                      IOSurfaceRef frame_surface,
                                                      CGDisplayStreamUpdateRef updateRef) {
       RTC_DCHECK(thread_checker_.IsCurrent());
diff --git a/modules/desktop_capture/mac/screen_capturer_sck.mm b/modules/desktop_capture/mac/screen_capturer_sck.mm
index fe44694d3a..9e2d9047e6 100644
--- a/modules/desktop_capture/mac/screen_capturer_sck.mm
+++ b/modules/desktop_capture/mac/screen_capturer_sck.mm
@@ -138,7 +138,7 @@ void ScreenCapturerSck::Start(DesktopCapturer::Callback* callback) {
   StartOrReconfigureCapturer();
 }
 
-void ScreenCapturerSck::SetMaxFrameRate(uint32_t max_frame_rate) {
+void ScreenCapturerSck::SetMaxFrameRate(uint32_t /* max_frame_rate */) {
   // TODO: crbug.com/327458809 - Implement this.
 }
 
@@ -345,7 +345,7 @@ void ScreenCapturerSck::StartOrReconfigureCapturer() {
   // inside the block is equivalent to `this->helper_` and would crash (UAF) if `this` is
   // deleted before the block is executed.
   SckHelper* local_helper = helper_;
-  auto handler = ^(SCShareableContent* content, NSError* error) {
+  auto handler = ^(SCShareableContent* content, NSError* /* error */) {
     [local_helper onShareableContentCreated:content];
   };
 
diff --git a/modules/desktop_capture/mouse_cursor_monitor.h b/modules/desktop_capture/mouse_cursor_monitor.h
index ad134df36d..31549cbc81 100644
--- a/modules/desktop_capture/mouse_cursor_monitor.h
+++ b/modules/desktop_capture/mouse_cursor_monitor.h
@@ -53,8 +53,8 @@ class MouseCursorMonitor {
     // Called in response to Capture(). `position` indicates cursor position
     // relative to the `window` specified in the constructor.
     // Deprecated: use the following overload instead.
-    virtual void OnMouseCursorPosition(CursorState state,
-                                       const DesktopVector& position) {}
+    virtual void OnMouseCursorPosition(CursorState /* state */,
+                                       const DesktopVector& /* position */) {}
 
     // Called in response to Capture(). `position` indicates cursor absolute
     // position on the system in fullscreen coordinate, i.e. the top-left
@@ -64,7 +64,7 @@ class MouseCursorMonitor {
     // TODO(zijiehe): Ensure all implementations return the absolute position.
     // TODO(zijiehe): Current this overload works correctly only when capturing
     // mouse cursor against fullscreen.
-    virtual void OnMouseCursorPosition(const DesktopVector& position) {}
+    virtual void OnMouseCursorPosition(const DesktopVector& /* position */) {}
 
    protected:
     virtual ~Callback() {}
diff --git a/modules/desktop_capture/window_capturer_unittest.cc b/modules/desktop_capture/window_capturer_unittest.cc
index 519c04601b..3483d4d2c8 100644
--- a/modules/desktop_capture/window_capturer_unittest.cc
+++ b/modules/desktop_capture/window_capturer_unittest.cc
@@ -33,7 +33,7 @@ class WindowCapturerTest : public ::testing::Test,
   void TearDown() override {}
 
   // DesktopCapturer::Callback interface
-  void OnCaptureResult(DesktopCapturer::Result result,
+  void OnCaptureResult(DesktopCapturer::Result /* result */,
                        std::unique_ptr<DesktopFrame> frame) override {
     frame_ = std::move(frame);
   }
-- 
2.42.0

